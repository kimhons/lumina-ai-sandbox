package ai.lumina.monitoring.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

/**
 * Represents an alert generated by the monitoring system.
 * Alerts are triggered when certain conditions are met in the monitored metrics.
 */
@Entity
@Table(name = "alerts")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Alert {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name of the alert
     */
    @Column(nullable = false)
    private String name;

    /**
     * Severity level of the alert (e.g., "critical", "warning", "info")
     */
    @Column(nullable = false)
    private String severity;

    /**
     * Status of the alert (e.g., "active", "acknowledged", "resolved")
     */
    @Column(nullable = false)
    private String status;

    /**
     * Service or component that triggered the alert
     */
    @Column(nullable = false)
    private String source;

    /**
     * Timestamp when the alert was triggered
     */
    @Column(nullable = false)
    private Instant triggerTime;

    /**
     * Timestamp when the alert was resolved (if applicable)
     */
    private Instant resolveTime;

    /**
     * Detailed description of the alert
     */
    @Column(length = 2000)
    private String description;

    /**
     * Rule or condition that triggered the alert
     */
    @Column(length = 1000)
    private String rule;

    /**
     * Value that triggered the alert
     */
    private Double triggerValue;

    /**
     * Threshold value for the alert
     */
    private Double thresholdValue;

    /**
     * Additional labels/tags for the alert
     */
    @ElementCollection
    @CollectionTable(name = "alert_labels", joinColumns = @JoinColumn(name = "alert_id"))
    @MapKeyColumn(name = "label_key")
    @Column(name = "label_value")
    private Map<String, String> labels = new HashMap<>();
}
