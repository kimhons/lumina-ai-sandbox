apiVersion: v1
kind: Namespace
metadata:
  name: lumina-ai
---
# Provider Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: provider-service
  namespace: lumina-ai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: provider-service
  template:
    metadata:
      labels:
        app: provider-service
    spec:
      containers:
      - name: provider-service
        image: lumina-ai/provider-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: DISCOVERY_SERVICE_URL
          value: "http://discovery-service:8761/eureka/"
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: provider-service
  namespace: lumina-ai
spec:
  selector:
    app: provider-service
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Memory Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-service
  namespace: lumina-ai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: memory-service
  template:
    metadata:
      labels:
        app: memory-service
    spec:
      containers:
      - name: memory-service
        image: lumina-ai/memory-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: DISCOVERY_SERVICE_URL
          value: "http://discovery-service:8761/eureka/"
        resources:
          limits:
            cpu: "1"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: memory-service
  namespace: lumina-ai
spec:
  selector:
    app: memory-service
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Collaboration Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collaboration-service
  namespace: lumina-ai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: collaboration-service
  template:
    metadata:
      labels:
        app: collaboration-service
    spec:
      containers:
      - name: collaboration-service
        image: lumina-ai/collaboration-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8085
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: DISCOVERY_SERVICE_URL
          value: "http://discovery-service:8761/eureka/"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/lumina_collaboration"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        resources:
          limits:
            cpu: "1"
            memory: "1.5Gi"
          requests:
            cpu: "500m"
            memory: "768Mi"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8085
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8085
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: collaboration-service
  namespace: lumina-ai
spec:
  selector:
    app: collaboration-service
  ports:
  - port: 8085
    targetPort: 8085
  type: ClusterIP
---
# Integration Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: integration-service
  namespace: lumina-ai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: integration-service
  template:
    metadata:
      labels:
        app: integration-service
    spec:
      containers:
      - name: integration-service
        image: lumina-ai/integration-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8085
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: DISCOVERY_SERVICE_URL
          value: "http://discovery-service:8761/eureka/"
        - name: INTEGRATION_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: integration-credentials
              key: secret-key
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/lumina"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        resources:
          limits:
            cpu: "1"
            memory: "1.5Gi"
          requests:
            cpu: "500m"
            memory: "768Mi"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8085
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8085
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: integration-service
  namespace: lumina-ai
spec:
  selector:
    app: integration-service
  ports:
  - port: 8085
    targetPort: 8085
  type: ClusterIP
---
# API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: lumina-ai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: lumina-ai/api-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: DISCOVERY_SERVICE_URL
          value: "http://discovery-service:8761/eureka/"
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: lumina-ai
spec:
  selector:
    app: api-gateway
  ports:
  - port: 8000
    targetPort: 8000
  type: LoadBalancer
---
# Discovery Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discovery-service
  namespace: lumina-ai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discovery-service
  template:
    metadata:
      labels:
        app: discovery-service
    spec:
      containers:
      - name: discovery-service
        image: lumina-ai/discovery-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8761
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8761
          initialDelaySeconds: 60
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8761
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: discovery-service
  namespace: lumina-ai
spec:
  selector:
    app: discovery-service
  ports:
  - port: 8761
    targetPort: 8761
  type: ClusterIP
---
# Persistent Volumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: lumina-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: lumina-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Databases
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: lumina-ai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: POSTGRES_DB
          value: "lumina"
        - name: POSTGRES_MULTIPLE_DATABASES
          value: "lumina,lumina_collaboration"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          limits:
            cpu: "1"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: lumina-ai
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# ConfigMap for Postgres init scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: lumina-ai
data:
  create-multiple-databases.sh: |
    #!/bin/bash
    set -e
    set -u

    function create_user_and_database() {
      local database=$1
      echo "Creating database '$database'"
      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
        CREATE DATABASE $database;
        GRANT ALL PRIVILEGES ON DATABASE $database TO $POSTGRES_USER;
    EOSQL
    }

    if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
      echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
      for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
        create_user_and_database $db
      done
      echo "Multiple databases created"
    fi
---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: lumina-ai
type: Opaque
data:
  username: bHVtaW5h  # base64 encoded "lumina"
  password: bHVtaW5hX3Bhc3N3b3Jk  # base64 encoded "lumina_password"
---
apiVersion: v1
kind: Secret
metadata:
  name: integration-credentials
  namespace: lumina-ai
type: Opaque
data:
  secret-key: bHVtaW5hLWludGVncmF0aW9uLXNlY3JldC1rZXk=  # base64 encoded "lumina-integration-secret-key"
