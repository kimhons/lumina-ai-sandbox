name: Lumina AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [provider-service, memory-service, security-service, ui-service, tool-service, api-gateway, discovery-service, config-service, observability-service]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build and Test
      run: |
        cd ${{ matrix.service }}
        ./mvnw clean verify
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.service }}
        path: ${{ matrix.service }}/target/surefire-reports
    
    - name: Build Docker Image
      run: |
        cd ${{ matrix.service }}
        docker build -t lumina-ai/${{ matrix.service }}:${{ github.sha }} .
    
    - name: Save Docker Image
      run: |
        docker save lumina-ai/${{ matrix.service }}:${{ github.sha }} > ${{ matrix.service }}.tar
    
    - name: Upload Docker Image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image-${{ matrix.service }}
        path: ${{ matrix.service }}.tar

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all Docker images
      uses: actions/download-artifact@v3
      with:
        path: images
    
    - name: Load Docker images
      run: |
        for image in images/docker-image-*/**.tar; do
          docker load < $image
        done
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'lumina-ai/provider-service:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name lumina-ai-dev-cluster --region us-west-2
    
    - name: Download all Docker images
      uses: actions/download-artifact@v3
      with:
        path: images
    
    - name: Load Docker images
      run: |
        for image in images/docker-image-*/**.tar; do
          docker load < $image
        done
    
    - name: Tag and push Docker images
      run: |
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
        for service in provider-service memory-service security-service ui-service tool-service api-gateway discovery-service config-service observability-service; do
          docker tag lumina-ai/$service:${{ github.sha }} ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:${{ github.sha }}
          docker tag lumina-ai/$service:${{ github.sha }} ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:latest
          docker push ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:${{ github.sha }}
          docker push ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:latest
        done
    
    - name: Deploy to Kubernetes
      run: |
        cd kubernetes
        # Update image tags in manifests
        for service in provider-service memory-service security-service ui-service tool-service api-gateway discovery-service config-service observability-service; do
          sed -i "s|lumina-ai/$service:latest|${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:${{ github.sha }}|g" manifests.yaml
        done
        kubectl apply -f manifests.yaml
    
    - name: Verify deployment
      run: |
        for service in provider-service memory-service security-service ui-service tool-service api-gateway discovery-service config-service observability-service; do
          kubectl rollout status deployment/$service -n lumina-ai --timeout=300s
        done

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name lumina-ai-prod-cluster --region us-west-2
    
    - name: Download all Docker images
      uses: actions/download-artifact@v3
      with:
        path: images
    
    - name: Load Docker images
      run: |
        for image in images/docker-image-*/**.tar; do
          docker load < $image
        done
    
    - name: Tag and push Docker images
      run: |
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
        for service in provider-service memory-service security-service ui-service tool-service api-gateway discovery-service config-service observability-service; do
          docker tag lumina-ai/$service:${{ github.sha }} ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:${{ github.sha }}
          docker tag lumina-ai/$service:${{ github.sha }} ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:stable
          docker push ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:${{ github.sha }}
          docker push ${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:stable
        done
    
    - name: Deploy to Kubernetes
      run: |
        cd kubernetes
        # Update image tags in manifests
        for service in provider-service memory-service security-service ui-service tool-service api-gateway discovery-service config-service observability-service; do
          sed -i "s|lumina-ai/$service:latest|${{ secrets.ECR_REPOSITORY }}/lumina-ai/$service:${{ github.sha }}|g" manifests.yaml
        done
        kubectl apply -f manifests.yaml
    
    - name: Verify deployment
      run: |
        for service in provider-service memory-service security-service ui-service tool-service api-gateway discovery-service config-service observability-service; do
          kubectl rollout status deployment/$service -n lumina-ai --timeout=300s
        done
